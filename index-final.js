import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys';
import pino from 'pino';
import qrcode from 'qrcode';
import fs from 'fs';
import path from 'path';

console.log('üöÄ –ó–∞–ø—É—Å–∫ WhatsApp –±–æ—Ç–∞...');

async function startBot() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { state, saveCreds } = await useMultiFileAuthState('LynxSession');
    
    console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    
    const conn = makeWASocket({
      version: [2, 2323, 4],
      auth: state,
      logger: pino({ level: 'silent' }),
      printQRInTerminal: true
    });
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞...');
    
    conn.ev.on('connection.update', async (update) => {
      const { connection, lastDisconnect, qr } = update;
      
      if (qr) {
        console.log('üì± QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!');
        
        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR –∫–æ–¥ –≤ —Ñ–∞–π–ª
          await qrcode.toFile('qr.png', qr);
          console.log('‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ qr.png');
          
          // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º QR –∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
          console.log('üì± QR –∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:');
          console.log(qr);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR –∫–æ–¥–∞:', error);
        }
      }
      
      if (connection === 'close') {
        const shouldReconnect = (lastDisconnect?.error)?.output?.statusCode !== DisconnectReason.loggedOut;
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–∑-–∑–∞ ', lastDisconnect?.error, ', –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ', shouldReconnect);
        if (!shouldReconnect) {
          process.exit(1);
        }
      } else if (connection === 'open') {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      }
    });
    
    conn.ev.on('creds.update', saveCreds);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    conn.ev.on('messages.upsert', async (m) => {
      const msg = m.messages[0];
      if (!msg.key.fromMe && msg.message) {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg.message);
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

startBot();

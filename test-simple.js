import { makeWASocket, DisconnectReason, useMultiFileAuthState } from 'baileys';
import pino from 'pino';
import qrcode from 'qrcode';

console.log('üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç QR –∫–æ–¥–∞...');

async function testQR() {
  try {
    console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Baileys...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { state, saveCreds } = await useMultiFileAuthState('test-session');
    
    console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    
    const conn = makeWASocket({
      version: [2, 2323, 4],
      auth: state,
      printQRInTerminal: true,
      logger: pino({ level: 'silent' })
    });
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞...');
    
    conn.ev.on('connection.update', async (update) => {
      const { connection, lastDisconnect, qr } = update;
      
      if (qr) {
        console.log('üì± QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!');
        console.log(qr);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR –∫–æ–¥ –≤ —Ñ–∞–π–ª
        await qrcode.toFile('test-qr.png', qr);
        console.log('‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test-qr.png');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.exit(0);
      }
      
      if (connection === 'close') {
        const shouldReconnect = (lastDisconnect?.error)?.output?.statusCode !== DisconnectReason.loggedOut;
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–∑-–∑–∞ ', lastDisconnect?.error, ', –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ', shouldReconnect);
        if (!shouldReconnect) {
          process.exit(1);
        }
      } else if (connection === 'open') {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        process.exit(0);
      }
    });
    
    conn.ev.on('creds.update', saveCreds);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

testQR();

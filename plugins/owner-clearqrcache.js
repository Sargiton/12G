import cacheManager from '../lib/cache.js';
import fs from 'fs';
import path from 'path';

const handler = async (m, { conn, usedPrefix, command }) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!m.isOwner) {
      return m.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞');
    }

    let clearedCount = 0;

    // 1. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏
    const qrKeys = cacheManager.nodeCache.keys().filter(key => key.startsWith('qr_'));
    for (const key of qrKeys) {
      cacheManager.nodeCache.del(key);
      clearedCount++;
    }

    // 2. –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ QR –∫–æ–¥–æ–≤
    const tmpDir = './tmp';
    if (fs.existsSync(tmpDir)) {
      const files = fs.readdirSync(tmpDir);
      files.forEach(file => {
        if (file.includes('qr') || file.includes('QR') || file.endsWith('.png') || file.endsWith('.jpg')) {
          try {
            fs.unlinkSync(path.join(tmpDir, file));
            clearedCount++;
          } catch (err) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}:`, err.message);
          }
        }
      });
    }

    // 3. –û—á–∏—Å—Ç–∫–∞ QR —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
    const rootFiles = fs.readdirSync('.');
    rootFiles.forEach(file => {
      if (file.includes('qr') || file.includes('QR') || file === 'qr.png' || file === 'qr.jpg') {
        try {
          fs.unlinkSync(file);
          clearedCount++;
        } catch (err) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è QR —Ñ–∞–π–ª–∞ ${file}:`, err.message);
        }
      }
    });

    // 4. –û—á–∏—Å—Ç–∫–∞ –æ–±—â–µ–≥–æ –∫—ç—à–∞
    await cacheManager.clear();

    m.reply(`‚úÖ –ö—ç—à QR –∫–æ–¥–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!\n\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${clearedCount}\nüßπ –û–±—â–∏–π –∫—ç—à –æ—á–∏—â–µ–Ω\nüßπ –§–∞–π–ª—ã QR –∫–æ–¥–æ–≤ —É–¥–∞–ª–µ–Ω—ã\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ QR –∫–æ–¥–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π.`);

    console.log(`üßπ QR cache completely cleared by owner: ${clearedCount} items removed`);

  } catch (error) {
    console.error('‚ùå Clear QR cache error:', error);
    m.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ QR –∫–æ–¥–æ–≤');
  }
};

handler.help = ['clearqrcache'];
handler.tags = ['owner'];
handler.command = /^(clearqrcache|–æ—á–∏—Å—Ç–∏—Ç—åqr|qrclear)$/i;
handler.owner = true;

export default handler;

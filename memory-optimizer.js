import { performance } from 'perf_hooks';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

class MemoryOptimizer {
  constructor() {
    this.memoryThreshold = 500 * 1024 * 1024; // 500MB
    this.gcInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    this.monitoringInterval = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥
    this.lastGC = Date.now();
    this.memoryUsage = [];
    this.maxMemoryHistory = 100;
    
    this.startMonitoring();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
  getProcessMemoryUsage() {
    const usage = process.memoryUsage();
    return {
      rss: usage.rss, // Resident Set Size
      heapTotal: usage.heapTotal,
      heapUsed: usage.heapUsed,
      external: usage.external,
      arrayBuffers: usage.arrayBuffers
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã
  async getSystemMemoryInfo() {
    try {
      if (process.platform === 'linux') {
        const { stdout } = await execAsync('free -m');
        const lines = stdout.split('\n');
        const memLine = lines[1].split(/\s+/);
        return {
          total: parseInt(memLine[1]) * 1024 * 1024,
          used: parseInt(memLine[2]) * 1024 * 1024,
          free: parseInt(memLine[3]) * 1024 * 1024
        };
      }
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
      return null;
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
  forceGarbageCollection() {
    if (global.gc) {
      global.gc();
      console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      this.lastGC = Date.now();
    } else {
      console.log('‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --expose-gc');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  clearCaches() {
    // –û—á–∏—Å—Ç–∫–∞ NodeCache
    if (global.msgRetryCounterCache) {
      global.msgRetryCounterCache.flushAll();
      console.log('üóëÔ∏è –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω');
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫—ç—à–µ–π
    if (global.plugins) {
      Object.keys(global.plugins).forEach(key => {
        const plugin = global.plugins[key];
        if (plugin && plugin.cache) {
          plugin.cache.flushAll();
        }
      });
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async clearTempFiles() {
    try {
      const { stdout } = await execAsync('find /tmp -name "*.tmp" -mtime +1 -delete 2>/dev/null || true');
      console.log('üóÇÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error.message);
    }
  }

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
  async monitorMemory() {
    const processMemory = this.getProcessMemoryUsage();
    const systemMemory = await this.getSystemMemoryInfo();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    this.memoryUsage.push({
      timestamp: Date.now(),
      process: processMemory,
      system: systemMemory
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (this.memoryUsage.length > this.maxMemoryHistory) {
      this.memoryUsage.shift();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
    const rssMB = processMemory.rss / 1024 / 1024;
    const heapUsedMB = processMemory.heapUsed / 1024 / 1024;
    
    console.log(`üìä –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: RSS=${rssMB.toFixed(1)}MB, Heap=${heapUsedMB.toFixed(1)}MB`);
    
    if (systemMemory) {
      const systemUsedMB = systemMemory.used / 1024 / 1024;
      const systemTotalMB = systemMemory.total / 1024 / 1024;
      console.log(`üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å: ${systemUsedMB.toFixed(0)}MB/${systemTotalMB.toFixed(0)}MB`);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
    if (processMemory.rss > this.memoryThreshold) {
      console.log('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏! –í—ã–ø–æ–ª–Ω—è—é –æ—á–∏—Å—Ç–∫—É...');
      this.performCleanup();
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
    if (Date.now() - this.lastGC > this.gcInterval) {
      this.forceGarbageCollection();
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
  async performCleanup() {
    console.log('üßπ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏...');
    
    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
    this.clearCaches();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
    this.forceGarbageCollection();
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await this.clearTempFiles();
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  startMonitoring() {
    console.log('üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏...');
    
    setInterval(() => {
      this.monitorMemory();
    }, this.monitoringInterval);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
  getMemoryStats() {
    const current = this.getProcessMemoryUsage();
    const history = this.memoryUsage;
    
    if (history.length === 0) {
      return { current, history: [] };
    }

    const avgRSS = history.reduce((sum, entry) => sum + entry.process.rss, 0) / history.length;
    const maxRSS = Math.max(...history.map(entry => entry.process.rss));
    const minRSS = Math.min(...history.map(entry => entry.process.rss));

    return {
      current,
      history: history.slice(-10), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
      stats: {
        avgRSS: avgRSS / 1024 / 1024,
        maxRSS: maxRSS / 1024 / 1024,
        minRSS: minRSS / 1024 / 1024,
        samples: history.length
      }
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
export default MemoryOptimizer;

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
if (!global.memoryOptimizer) {
  global.memoryOptimizer = new MemoryOptimizer();
}

export { MemoryOptimizer }; 
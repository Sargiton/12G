#!/bin/bash

echo "üîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –†–ê–ë–û–ß–ï–ì–û –ë–û–¢–ê"
echo "================================"

cd /root/12G

echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç—ã..."
pm2 stop all

echo ""
echo "üîß –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –†–ê–ë–û–ß–£–Æ –í–ï–†–°–ò–Æ BAILEYS..."

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
npm uninstall baileys @whiskeysockets/baileys
npm install @whiskeysockets/baileys@6.5.0 --save-exact

echo ""
echo "üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï –ò–ú–ü–û–†–¢–´..."

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ @whiskeysockets/baileys
find . -name "*.js" -type f -exec sed -i 's/from '\''baileys'\''/from '\''@whiskeysockets\/baileys'\''/g' {} \;
find . -name "*.js" -type f -exec sed -i 's/from "baileys"/from "@whiskeysockets\/baileys"/g' {} \;

echo ""
echo "üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –û–°–ù–û–í–ù–´–ï –§–ê–ô–õ–´..."

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
sed -i 's/import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '\''baileys'\''/import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '\''@whiskeysockets\/baileys'\''/g' index.js
sed -i 's/import { generateWAMessageFromContent } from "baileys"/import { generateWAMessageFromContent } from "@whiskeysockets\/baileys"/g' handler.js
sed -i 's/import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '\''baileys'\''/import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '\''@whiskeysockets\/baileys'\''/g' lib/simple.js

echo ""
echo "üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú QR –ì–ï–ù–ï–†–ê–¶–ò–Æ..."

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é connectionUpdate –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR
sed -i '/if (update.qr != 0 && update.qr != undefined || methodCodeQR) {/,/}/c\
if (update.qr != 0 && update.qr != undefined || methodCodeQR) {\
if (opcion == '\''1'\'' || methodCodeQR) {\
console.log(chalk.bold.yellow(lenguajeGB['\''smsCodigoQR'\'']()));\
// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ\
qrcode.generate(update.qr, { small: true });\
// –°–æ—Ö—Ä–∞–Ω—è–µ–º QR –∫–æ–¥ –≤ —Ñ–∞–π–ª\
QRCode.toFile('\''qr.png'\'', update.qr, function (err) {\
  if (err) {\
    console.error('\''–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR:'\'', err);\
  } else {\
    console.log('\''‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ qr.png'\'');\
  }\
});\
console.log('\''üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR –∫–æ–¥ —á–µ—Ä–µ–∑ WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ!'\'');\
}\
}' index.js

echo ""
echo "üîß –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–ê–ö–ï–¢–´..."

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
npm install aptoide-scraper ruhend-scraper node-os-utils @vitalets/google-translate-api --save

echo ""
echo "üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú CHEERIO –ò–ú–ü–û–†–¢–´..."

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã cheerio
find . -name "*.js" -type f -exec sed -i 's/import cheerio from '\''cheerio'\''/import * as cheerio from '\''cheerio'\''/g' {} \;

echo ""
echo "üîß –°–û–ó–î–ê–ï–ú –†–ê–ë–û–ß–ò–ô QR –ì–ï–ù–ï–†–ê–¢–û–†..."

# –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π QR –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
cat > working-qr.js << 'EOF'
import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys'
import pino from 'pino'
import qrcode from 'qrcode-terminal'
import QRCode from 'qrcode'

console.log('üß™ –†–ê–ë–û–ß–ò–ô –ì–ï–ù–ï–†–ê–¢–û–† QR –ö–û–î–ê')
console.log('============================')

async function generateQR() {
    try {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...')
        
        const { state, saveCreds } = await useMultiFileAuthState('LynxSession')
        
        console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...')
        const sock = makeWASocket({
            auth: state,
            printQRInTerminal: false, // –û—Ç–∫–ª—é—á–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –æ–ø—Ü–∏—é
            logger: pino({ level: 'silent' }),
            browser: ['Lynx Bot', 'Chrome', '1.0.0']
        })
        
        sock.ev.on('connection.update', async (update) => {
            const { connection, lastDisconnect, qr } = update
            
            console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', connection)
            
            if (qr) {
                console.log('‚úÖ QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!')
                qrcode.generate(qr, { small: true })
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR –≤ —Ñ–∞–π–ª
                QRCode.toFile('qr.png', qr, function (err) {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR:', err);
                    } else {
                        console.log('‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ qr.png');
                    }
                });
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process.exit(0)
            }
            
            if (connection === 'open') {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
                process.exit(0)
            }
            
            if (connection === 'close') {
                const shouldReconnect = (lastDisconnect?.error)?.output?.statusCode !== DisconnectReason.loggedOut
                console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', lastDisconnect?.error)
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', shouldReconnect)
                if (!shouldReconnect) {
                    process.exit(1)
                }
            }
        })
        
        // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ')
            process.exit(1)
        }, 30000)
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error)
        process.exit(1)
    }
}

generateQR()
EOF

echo ""
echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏..."
rm -rf LynxSession/*
rm -f qr.png

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å..."
node -c index.js
node -c handler.js

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Baileys..."
npm list @whiskeysockets/baileys

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã..."
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json..."
grep -A 5 -B 5 "baileys" package.json

echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã..."
pm2 start ecosystem-final.config.cjs

echo ""
echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞..."
sleep 10

echo ""
echo "üìã –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤:"
pm2 list

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
pm2 logs whatsapp-bot --lines 15

echo ""
echo "‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –†–ê–ë–û–ß–ï–ì–û –ë–û–¢–ê –ó–ê–í–ï–†–®–ï–ù–û!"
echo "=========================================="
echo "üì± –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:"
echo "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /qr –≤ Telegram –±–æ—Ç–∞"
echo "2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node working-qr.js"
echo ""
echo "üîß –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:"
echo "   pm2 restart all"
echo "   pm2 logs whatsapp-bot --lines 50"

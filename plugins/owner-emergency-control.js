import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

const handler = async (m, { conn, usedPrefix, command }) => {
  try {
    if (!m.isOwner) {
      return m.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞');
    }

    const action = command.toLowerCase();

    switch (action) {
      case 'emergencystop':
      case '—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è–æ—Å—Ç–∞–Ω–æ–≤–∫–∞':
        await m.reply('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –°–ï–†–í–ï–†–ê!');
        try {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
          await execAsync('pm2 stop all');
          await execAsync('pm2 delete all');
          await execAsync('pkill -f node');
          await execAsync('pkill -f pm2');
          
          m.reply('‚úÖ –°–µ—Ä–≤–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\nüõë –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`);
        }
        break;

      case 'emergencyrestart':
      case '—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫':
        await m.reply('üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê!');
        try {
          // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
          await execAsync('pm2 stop all');
          await execAsync('pm2 delete all');
          await execAsync('pkill -f node');
          
          // –û—á–∏—Å—Ç–∫–∞
          await execAsync('rm -rf tmp/*');
          await execAsync('rm -rf storage/data/cache/*');
          await execAsync('npm cache clean --force');
          
          // –ó–∞–ø—É—Å–∫
          await execAsync('pm2 start ecosystem-simple.config.cjs');
          
          m.reply('‚úÖ –°–µ—Ä–≤–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\nüßπ –ö—ç—à –æ—á–∏—â–µ–Ω\nüöÄ –ü—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã');
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${error.message}`);
        }
        break;

      case 'killall':
      case '—É–±–∏—Ç—å–≤—Å–µ':
        await m.reply('üíÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í!');
        try {
          await execAsync('sudo pkill -9 -f node');
          await execAsync('sudo pkill -9 -f pm2');
          await execAsync('sudo systemctl restart pm2-root');
          
          m.reply('üíÄ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\nüîÑ PM2 –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${error.message}`);
        }
        break;

      case 'systeminfo':
      case '–∏–Ω—Ñ–æ—Å–∏—Å—Ç–µ–º—ã':
        await m.reply('üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ...');
        try {
          const [cpu, mem, disk, uptime] = await Promise.all([
            execAsync('top -bn1 | grep "Cpu(s)" | awk \'{print $2}\' | cut -d"%" -f1'),
            execAsync('free -m | awk \'NR==2{printf "%.2f%%", $3*100/$2}\''),
            execAsync('df -h | awk \'$NF=="/"{printf "%s", $5}\''),
            execAsync('uptime -p')
          ]);
          
          const info = `üìä **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï**

üñ•Ô∏è **CPU:** ${cpu.stdout.trim()}%
üíæ **RAM:** ${mem.stdout.trim()}
üíø **–î–∏—Å–∫:** ${disk.stdout.trim()}
‚è∞ **–ê–ø—Ç–∞–π–º:** ${uptime.stdout.trim()}

üîÑ **–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:**
\`\`\`
${(await execAsync('pm2 list')).stdout}
\`\`\``;
          
          m.reply(info);
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`);
        }
        break;

      default:
        m.reply(`üö® **–≠–ö–°–¢–†–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´**

üíÄ \`.emergencystop\` - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
üö® \`.emergencyrestart\` - –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
üíÄ \`.killall\` - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
üìä \`.systeminfo\` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ

‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!
üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö!`);
    }

  } catch (error) {
    console.error('‚ùå Emergency control error:', error);
    m.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }
};

handler.help = ['emergencystop', 'emergencyrestart', 'killall', 'systeminfo'];
handler.tags = ['owner', 'emergency'];
handler.command = /^(emergencystop|emergencyrestart|killall|systeminfo|—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è–æ—Å—Ç–∞–Ω–æ–≤–∫–∞|—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫|—É–±–∏—Ç—å–≤—Å–µ|–∏–Ω—Ñ–æ—Å–∏—Å—Ç–µ–º—ã)$/i;
handler.owner = true;

export default handler;

import { makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion } from 'baileys';
import qrcode from 'qrcode-terminal';
import QRCode from 'qrcode';
import fs from 'fs';
import pino from 'pino';

console.log('üöÄ –¢–µ—Å—Ç QR –∫–æ–¥–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ª–æ–≥–≥–µ—Ä–æ–º...');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync('./LynxSession')) {
    fs.mkdirSync('./LynxSession', { recursive: true });
}

async function testQR() {
    try {
        console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Baileys...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const { state, saveCreds } = await useMultiFileAuthState('./LynxSession');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é Baileys
        const { version } = await fetchLatestBaileysVersion();
        
        console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        const logger = pino({ level: 'silent' });
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ª–æ–≥–≥–µ—Ä–æ–º
        const conn = makeWASocket({
            version,
            auth: {
                creds: state.creds,
                keys: state.keys,
            },
            printQRInTerminal: true,
            logger: logger
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.ev.on('connection.update', async (update) => {
            const { connection, lastDisconnect, qr } = update;
            
            if (qr) {
                console.log('üì± QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
                qrcode.generate(qr, { small: true });
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR –≤ —Ñ–∞–π–ª
                try {
                    await QRCode.toFile('qr.png', qr);
                    console.log('‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ qr.png');
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR:', err);
                }
            }
            
            if (connection === 'open') {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
                process.exit(0);
            }
            
            if (connection === 'close') {
                console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                process.exit(1);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        conn.ev.on('creds.update', saveCreds);
        
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞...');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

testQR();

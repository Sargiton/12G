import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üîç –¢–ï–°–¢ –°–†–ï–î–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø');
console.log('========================');

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
console.log('\nüìä –°–∏—Å—Ç–µ–º–∞:');
console.log('Node.js –≤–µ—Ä—Å–∏—è:', process.version);
console.log('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', process.platform);
console.log('–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:', process.arch);
console.log('–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
console.log('\nüìÑ package.json:');
try {
    const packagePath = join(process.cwd(), 'package.json');
    if (fs.existsSync(packagePath)) {
        const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
        console.log('‚úÖ package.json –Ω–∞–π–¥–µ–Ω');
        console.log('–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', packageData.version);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º baileys
        if (packageData.dependencies && packageData.dependencies['@whiskeysockets/baileys']) {
            console.log('‚úÖ @whiskeysockets/baileys –≤ dependencies:', packageData.dependencies['@whiskeysockets/baileys']);
        } else {
            console.log('‚ùå @whiskeysockets/baileys –ù–ï –Ω–∞–π–¥–µ–Ω –≤ dependencies');
        }
    } else {
        console.log('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
console.log('\nüì¶ node_modules:');
const nodeModulesPath = join(process.cwd(), 'node_modules');
if (fs.existsSync(nodeModulesPath)) {
    console.log('‚úÖ node_modules –Ω–∞–π–¥–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º @whiskeysockets/baileys
    const baileysPath = join(nodeModulesPath, '@whiskeysockets', 'baileys');
    if (fs.existsSync(baileysPath)) {
        console.log('‚úÖ @whiskeysockets/baileys —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        try {
            const baileysPackage = JSON.parse(fs.readFileSync(join(baileysPath, 'package.json'), 'utf8'));
            console.log('–í–µ—Ä—Å–∏—è @whiskeysockets/baileys:', baileysPackage.version);
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ @whiskeysockets/baileys');
        }
    } else {
        console.log('‚ùå @whiskeysockets/baileys –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º baileys
    const baileysOldPath = join(nodeModulesPath, 'baileys');
    if (fs.existsSync(baileysOldPath)) {
        console.log('‚úÖ baileys —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        try {
            const baileysOldPackage = JSON.parse(fs.readFileSync(join(baileysOldPath, 'package.json'), 'utf8'));
            console.log('–í–µ—Ä—Å–∏—è baileys:', baileysOldPackage.version);
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ baileys');
        }
    } else {
        console.log('‚ùå baileys –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
} else {
    console.log('‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç baileys
console.log('\nüß™ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ baileys:');
try {
    console.log('–ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å @whiskeysockets/baileys...');
    const { default: makeWASocket } = await import('@whiskeysockets/baileys');
    console.log('‚úÖ @whiskeysockets/baileys –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('–¢–∏–ø makeWASocket:', typeof makeWASocket);
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ @whiskeysockets/baileys:', error.message);
}

try {
    console.log('–ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å baileys...');
    const { default: makeWASocketOld } = await import('baileys');
    console.log('‚úÖ baileys –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('–¢–∏–ø makeWASocket:', typeof makeWASocketOld);
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ baileys:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\nüåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('NODE_ENV:', process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('NODE_OPTIONS:', process.env.NODE_OPTIONS || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');

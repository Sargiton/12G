import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';

const execAsync = promisify(exec);

const handler = async (m, { conn, usedPrefix, command }) => {
  try {
    if (!m.isOwner) {
      return m.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞');
    }

    const action = command.toLowerCase();

    switch (action) {
      case 'stopserver':
      case '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å–µ—Ä–≤–µ—Ä':
        await m.reply('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...');
        try {
          await execAsync('pm2 stop all');
          await execAsync('pm2 delete all');
          m.reply('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
        }
        break;

      case 'startserver':
      case '–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å–µ—Ä–≤–µ—Ä':
        await m.reply('üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...');
        try {
          await execAsync('pm2 start ecosystem-simple.config.cjs');
          m.reply('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
        }
        break;

      case 'restartserver':
      case '–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å–µ—Ä–≤–µ—Ä':
        await m.reply('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...');
        try {
          await execAsync('pm2 stop all');
          await execAsync('pm2 delete all');
          await execAsync('pm2 start ecosystem-simple.config.cjs');
          m.reply('‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!');
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
        }
        break;

      case 'clearqrcache':
      case '–æ—á–∏—Å—Ç–∏—Ç—åqr':
        await m.reply('üßπ –û—á–∏—â–∞—é QR –∫—ç—à...');
        try {
          // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏
          const cacheManager = await import('../lib/cache.js');
          const qrKeys = cacheManager.default.nodeCache.keys().filter(key => key.startsWith('qr_'));
          qrKeys.forEach(key => cacheManager.default.nodeCache.del(key));

          // –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
          const tmpDir = './tmp';
          if (fs.existsSync(tmpDir)) {
            const files = fs.readdirSync(tmpDir);
            files.forEach(file => {
              if (file.includes('qr') || file.includes('QR') || file.endsWith('.png') || file.endsWith('.jpg')) {
                try {
                  fs.unlinkSync(path.join(tmpDir, file));
                } catch (err) {
                  console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}:`, err.message);
                }
              }
            });
          }

          // –£–¥–∞–ª–µ–Ω–∏–µ QR —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
          const rootFiles = fs.readdirSync('.');
          rootFiles.forEach(file => {
            if (file.includes('qr') || file.includes('QR') || file === 'qr.png' || file === 'qr.jpg') {
              try {
                fs.unlinkSync(file);
              } catch (err) {
                console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è QR —Ñ–∞–π–ª–∞ ${file}:`, err.message);
              }
            }
          });

          await cacheManager.default.clear();
          m.reply(`‚úÖ QR –∫—ç—à –æ—á–∏—â–µ–Ω!\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ QR –∫–æ–¥–æ–≤: ${qrKeys.length}\nüßπ –§–∞–π–ª—ã QR –∫–æ–¥–æ–≤ —É–¥–∞–ª–µ–Ω—ã`);
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ QR –∫—ç—à–∞: ${error.message}`);
        }
        break;

      case 'serverstatus':
      case '—Å—Ç–∞—Ç—É—Å—Å–µ—Ä–≤–µ—Ä–∞':
        await m.reply('üìä –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...');
        try {
          const { stdout } = await execAsync('pm2 list');
          m.reply(`üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n\`\`\`${stdout}\`\`\``);
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
        }
        break;

      case 'serverlogs':
      case '–ª–æ–≥–∏—Å–µ—Ä–≤–µ—Ä–∞':
        await m.reply('üìã –ü–æ–ª—É—á–∞—é –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
        try {
          const { stdout } = await execAsync('pm2 logs --lines 20 --nostream');
          const logs = stdout.length > 4000 ? stdout.substring(0, 4000) + '...' : stdout;
          m.reply(`üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n\`\`\`${logs}\`\`\``);
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error.message}`);
        }
        break;

      case 'fixserver':
      case '–∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å–µ—Ä–≤–µ—Ä':
        await m.reply('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ä–≤–µ—Ä–∞...');
        try {
          // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
          await execAsync('pm2 stop all');
          await execAsync('pm2 delete all');
          
          // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
          await execAsync('npm cache clean --force');
          await execAsync('rm -rf tmp/*');
          await execAsync('rm -rf storage/data/cache/*');
          
          // –ó–∞–ø—É—Å–∫
          await execAsync('pm2 start ecosystem-simple.config.cjs');
          
          m.reply('‚úÖ –°–µ—Ä–≤–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!');
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
        }
        break;

      case 'updatepackages':
      case '–æ–±–Ω–æ–≤–∏—Ç—å–ø–∞–∫–µ—Ç—ã':
        await m.reply('üì¶ –û–±–Ω–æ–≤–ª—è—é –ø–∞–∫–µ—Ç—ã...');
        try {
          await execAsync('npm audit fix --force');
          await execAsync('npm update');
          m.reply('‚úÖ –ü–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        } catch (error) {
          m.reply(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤: ${error.message}`);
        }
        break;

      default:
        m.reply(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º:

üõë .stopserver - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
üöÄ .startserver - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
üîÑ .restartserver - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
üßπ .clearqrcache - –û—á–∏—Å—Ç–∏—Ç—å QR –∫—ç—à
üìä .serverstatus - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
üìã .serverlogs - –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
üîß .fixserver - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
üì¶ .updatepackages - –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram!`);
    }

  } catch (error) {
    console.error('‚ùå Server control error:', error);
    m.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
  }
};

handler.help = [
  'stopserver', 'startserver', 'restartserver', 'clearqrcache',
  'serverstatus', 'serverlogs', 'fixserver', 'updatepackages'
];
handler.tags = ['owner', 'server'];
handler.command = /^(stopserver|startserver|restartserver|clearqrcache|serverstatus|serverlogs|fixserver|updatepackages|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å–µ—Ä–≤–µ—Ä|–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å–µ—Ä–≤–µ—Ä|–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å–µ—Ä–≤–µ—Ä|–æ—á–∏—Å—Ç–∏—Ç—åqr|—Å—Ç–∞—Ç—É—Å—Å–µ—Ä–≤–µ—Ä–∞|–ª–æ–≥–∏—Å–µ—Ä–≤–µ—Ä–∞|–∏—Å–ø—Ä–∞–≤–∏—Ç—å—Å–µ—Ä–≤–µ—Ä|–æ–±–Ω–æ–≤–∏—Ç—å–ø–∞–∫–µ—Ç—ã)$/i;
handler.owner = true;

export default handler;

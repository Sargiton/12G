#!/bin/bash

echo "üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ì–ï–†–ê"
echo "================================"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã..."
pm2 stop all
pm2 delete all
pkill -f node

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
cd /root/12G

# –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
echo "üßπ –û—á–∏—â–∞–µ–º –∫—ç—à–∏..."
rm -rf node_modules
rm -f package-lock.json
npm cache clean --force

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é Baileys
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º baileys@6.7.0..."
npm install baileys@6.7.0 --save-exact

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
npm install --force

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã..."
npm install qrcode-terminal qrcode pino --force

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –≤ index.js
echo "üìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –≤ index.js..."
sed -i 's/logger: { level: '\''silent'\'' }/logger: pino({ level: '\''silent'\'' })/g' index.js

# –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏
echo "üóÇÔ∏è –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏..."
rm -rf LynxSession/*
rm -rf BackupSession/*
rm -f qr.png qr.jpg

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
echo "üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏..."
mkdir -p LynxSession BackupSession tmp logs

# –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç QR –∫–æ–¥–∞
echo "üìù –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç QR –∫–æ–¥–∞..."
cat > test-qr-working.js << 'EOF'
import { makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion } from 'baileys';
import qrcode from 'qrcode-terminal';
import QRCode from 'qrcode';
import fs from 'fs';
import pino from 'pino';

console.log('üöÄ –¢–µ—Å—Ç QR –∫–æ–¥–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ª–æ–≥–≥–µ—Ä–æ–º...');

if (!fs.existsSync('./LynxSession')) {
    fs.mkdirSync('./LynxSession', { recursive: true });
}

async function testQR() {
    try {
        console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Baileys...');
        const { state, saveCreds } = await useMultiFileAuthState('./LynxSession');
        const { version } = await fetchLatestBaileysVersion();
        
        console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        const logger = pino({ level: 'silent' });
        
        const conn = makeWASocket({
            version,
            auth: {
                creds: state.creds,
                keys: state.keys,
            },
            printQRInTerminal: true,
            logger: logger
        });

        conn.ev.on('connection.update', async (update) => {
            const { connection, lastDisconnect, qr } = update;
            if (qr) {
                console.log('üì± QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!');
                qrcode.generate(qr, { small: true });
                try {
                    await QRCode.toFile('qr.png', qr);
                    console.log('‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ qr.png');
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR:', err);
                }
            }
            if (connection === 'open') {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
                process.exit(0);
            }
            if (connection === 'close') {
                console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                process.exit(1);
            }
        });
        conn.ev.on('creds.update', saveCreds);
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞...');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}
testQR();
EOF

# –¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥
echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥..."
if [ -f "test-qr-working.js" ]; then
    echo "‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç QR –∫–æ–¥–∞ (10 —Å–µ–∫—É–Ω–¥)..."
    timeout 10 node test-qr-working.js &
    QR_PID=$!
    sleep 10
    kill $QR_PID 2>/dev/null
    
    if [ -f "qr.png" ]; then
        echo "‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!"
        echo "üìÖ –í—Ä–µ–º—è: $(stat -c %y qr.png)"
    else
        echo "‚ùå QR –∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
    fi
else
    echo "‚ùå –§–∞–π–ª test-qr-working.js –Ω–µ —Å–æ–∑–¥–∞–Ω"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã..."
if [ -f "ecosystem-simple.config.cjs" ]; then
    pm2 start ecosystem-simple.config.cjs
else
    pm2 start index.js --name "whatsapp-bot"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
sleep 5
pm2 list

echo ""
echo "üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo "=================================="
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ baileys@6.7.0"
echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ª–æ–≥–≥–µ—Ä –≤ index.js"
echo "‚úÖ QR –∫–æ–¥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "‚úÖ –ë–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã"
echo ""
echo "üì± –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞"

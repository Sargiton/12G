#!/bin/bash

echo "üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú"
echo "=================================="

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
cd /root/12G

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç—ã
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç—ã..."
pm2 stop all

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
echo "üì• –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥..."
git pull origin master

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç cheerio
echo "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç cheerio..."
sed -i 's/import cheerio from '\''cheerio'\''/import * as cheerio from '\''cheerio'\''/g' config.js

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å..."
node -c config.js
node -c index.js

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã..."
ls -la test-qr-simple.js

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏..."
rm -rf LynxSession/*
rm -f qr.png

# –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
npm install

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã..."
pm2 start ecosystem-final.config.cjs

# –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
sleep 5

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo ""
echo "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo "========================"
pm2 list

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
pm2 logs whatsapp-bot --lines 10

echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º QR –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."
if [ -f "test-qr-simple.js" ]; then
    echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-qr-simple.js"
else
    echo "‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç..."
    cat > test-qr-simple.js << 'EOF'
import { makeWASocket, DisconnectReason, useMultiFileAuthState } from 'baileys'
import pino from 'pino'
import qrcode from 'qrcode-terminal'

console.log('üß™ –¢–ï–°–¢ QR –ì–ï–ù–ï–†–ê–¶–ò–ò')

async function testQR() {
    try {
        const { state, saveCreds } = await useMultiFileAuthState('LynxSession')
        
        const sock = makeWASocket({
            auth: state,
            printQRInTerminal: true,
            logger: pino({ level: 'silent' }),
            browser: ['Lynx Bot', 'Chrome', '1.0.0']
        })
        
        sock.ev.on('connection.update', async (update) => {
            const { connection, lastDisconnect, qr } = update
            
            if (qr) {
                console.log('‚úÖ QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!')
                qrcode.generate(qr, { small: true })
                
                const fs = await import('fs')
                const qrCode = await import('qrcode')
                const qrBuffer = await qrCode.toBuffer(qr)
                fs.writeFileSync('qr.png', qrBuffer)
                console.log('‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ qr.png')
                process.exit(0)
            }
            
            if (connection === 'open') {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
                process.exit(0)
            }
        })
        
        setTimeout(() => {
            console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ')
            process.exit(1)
        }, 30000)
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error)
        process.exit(1)
    }
}

testQR()
EOF
    echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
fi

echo ""
echo "üì± –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /qr –≤ Telegram –±–æ—Ç–∞"
echo "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node test-qr-simple.js"
